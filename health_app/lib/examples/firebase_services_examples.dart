// ============================================================================
// FIREBASE SERVICES USAGE EXAMPLES
// ============================================================================
//
// ƒê√¢y l√† file h∆∞·ªõng d·∫´n c√°ch s·ª≠ d·ª•ng c√°c Firebase services trong ·ª©ng d·ª•ng
// Health Tracking App. File n√†y ch·ª©a c√°c v√≠ d·ª• th·ª±c t·∫ø v·ªÅ c√°ch t√≠ch h·ª£p
// Analytics, Crashlytics v√† Performance Monitoring.
//
// ============================================================================

import 'package:flutter/material.dart';
import '../utils/firebase_utils.dart';
import '../services/data_monitoring/firebase_analytics_service.dart';
import '../services/data_monitoring/firebase_crashlytics_service.dart';

class FirebaseServicesExamples {
  // ========================================================================
  // 1. KH·ªûI T·∫†O SERVICES
  // ========================================================================

  /// Kh·ªüi t·∫°o t·∫•t c·∫£ Firebase services (ƒë√£ ƒë∆∞·ª£c g·ªçi trong main.dart)
  static Future<void> initializeServices() async {
    await FirebaseUtils.initialize();
  }

  // ========================================================================
  // 2. ANALYTICS - THEO D√ïI H√ÄNH VI NG∆Ø·ªúI D√ôNG
  // ========================================================================

  /// Theo d√µi khi ng∆∞·ªùi d√πng m·ªü m·ªôt m√†n h√¨nh
  static Future<void> trackScreenView(String screenName) async {
    // C√°ch 1: S·ª≠ d·ª•ng FirebaseUtils (ƒë∆∞·ª£c khuy√™n d√πng)
    await FirebaseUtils.trackNavigation(screenName);

    // C√°ch 2: S·ª≠ d·ª•ng tr·ª±c ti·∫øp service
    await FirebaseAnalyticsService.logScreenView(screenName: screenName);
  }

  /// Theo d√µi khi ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p
  static Future<void> trackUserLogin(String method, String userId) async {
    // ƒêƒÉng nh·∫≠p th√†nh c√¥ng
    await FirebaseAnalyticsService.logLogin(loginMethod: method);

    // ƒê·∫∑t th√¥ng tin ng∆∞·ªùi d√πng
    await FirebaseUtils.setUserSession(
      userId: userId,
      email: 'user@example.com',
      userType: 'premium',
    );
  }

  /// Theo d√µi ho·∫°t ƒë·ªông workout
  static Future<void> trackWorkoutActivity() async {
    // B·∫Øt ƒë·∫ßu workout
    await FirebaseAnalyticsService.logWorkoutStart(
      workoutType: 'running',
      location: 'outdoor',
    );

    // K·∫øt th√∫c workout
    await FirebaseAnalyticsService.logWorkoutEnd(
      workoutType: 'running',
      duration: 1800, // 30 ph√∫t
      distance: 5000, // 5km
      calories: 300,
    );
  }

  /// Theo d√µi t∆∞∆°ng t√°c v·ªõi n√∫t b·∫•m
  static Future<void> trackButtonInteraction() async {
    await FirebaseUtils.trackButtonTap(
      'start_workout_button',
      screenName: 'home_screen',
    );
  }

  /// Theo d√µi m·ª•c ti√™u ƒë∆∞·ª£c ƒë·∫°t
  static Future<void> trackGoalAchievement() async {
    await FirebaseAnalyticsService.logGoalAchievement(
      goalType: 'distance',
      goalValue: '10km',
    );
  }

  // ========================================================================
  // 3. CRASHLYTICS - THEO D√ïI L·ªñI V√Ä CRASH
  // ========================================================================

  /// Ghi l·∫°i l·ªói kh√¥ng nghi√™m tr·ªçng
  static Future<void> logNonFatalError() async {
    try {
      // Code c√≥ th·ªÉ g√¢y l·ªói
      throw Exception('Something went wrong');
    } catch (error, stackTrace) {
      // Ghi l·∫°i l·ªói v·ªõi context
      await FirebaseUtils.logNonFatalError(
        error,
        stackTrace,
        context: 'User was trying to start workout',
        screenName: 'workout_screen',
        additionalInfo: {
          'user_action': 'start_workout',
          'workout_type': 'running',
        },
      );
    }
  }

  /// Ghi l·∫°i th√¥ng tin custom cho debugging
  static Future<void> logCustomInfo(String userId) async {
    // ƒê·∫∑t user ID
    await FirebaseCrashlyticsService.setUserId(userId);

    // ƒê·∫∑t custom keys
    await FirebaseCrashlyticsService.setCustomKey('user_type', 'premium');
    await FirebaseCrashlyticsService.setCustomKey('app_version', '1.0.0');

    // Ghi log message
    await FirebaseUtils.logCustomMessage('User started new workout session');
  }

  /// X·ª≠ l√Ω l·ªói authentication
  static Future<void> handleAuthError(dynamic error) async {
    await FirebaseCrashlyticsService.logAuthError(
      'login_failed',
      error.toString(),
    );
  }

  // ========================================================================
  // 4. PERFORMANCE - THEO D√ïI HI·ªÜU SU·∫§T
  // ========================================================================

  /// Theo d√µi hi·ªáu su·∫•t c·ªßa operation b·∫•t ƒë·ªìng b·ªô
  static Future<String> trackAsyncOperation() async {
    return await FirebaseUtils.trackAsyncOperation(
      'load_user_data',
      () async {
        // Gi·∫£ l·∫≠p vi·ªác t·∫£i data
        await Future.delayed(const Duration(seconds: 2));
        return 'User data loaded';
      },
      attributes: {'data_source': 'firestore', 'cache_enabled': 'true'},
    );
  }

  /// Theo d√µi hi·ªáu su·∫•t authentication
  static Future<bool> trackAuthOperation() async {
    return await FirebaseUtils.trackAuthOperation('google_sign_in', () async {
      // Th·ª±c hi·ªán ƒëƒÉng nh·∫≠p Google
      await Future.delayed(const Duration(seconds: 3));
      return true;
    }, method: 'google');
  }

  /// Theo d√µi hi·ªáu su·∫•t location services
  static Future<Map<String, double>> trackLocationOperation() async {
    return await FirebaseUtils.trackLocationOperation(
      'get_current_location',
      () async {
        // L·∫•y v·ªã tr√≠ hi·ªán t·∫°i
        await Future.delayed(const Duration(seconds: 1));
        return {'latitude': 21.0285, 'longitude': 105.8542};
      },
      accuracy: 'high',
    );
  }

  /// Theo d√µi hi·ªáu su·∫•t database operations
  static Future<List<String>> trackDatabaseOperation() async {
    return await FirebaseUtils.trackDatabaseOperation(
      'fetch_workouts',
      () async {
        // L·∫•y danh s√°ch workouts t·ª´ Firestore
        await Future.delayed(const Duration(milliseconds: 500));
        return ['workout1', 'workout2', 'workout3'];
      },
      collection: 'workouts',
    );
  }

  // ========================================================================
  // 5. T√çCH H·ª¢P V√ÄO UI COMPONENTS
  // ========================================================================

  /// Example c·ªßa m·ªôt StatefulWidget c√≥ t√≠ch h·ª£p Firebase services
  static Widget buildExampleWidget() {
    return const FirebaseIntegratedWidget();
  }
}

/// Example widget t√≠ch h·ª£p Firebase services
class FirebaseIntegratedWidget extends StatefulWidget {
  const FirebaseIntegratedWidget({super.key});

  @override
  State<FirebaseIntegratedWidget> createState() =>
      _FirebaseIntegratedWidgetState();
}

class _FirebaseIntegratedWidgetState extends State<FirebaseIntegratedWidget> {
  @override
  void initState() {
    super.initState();
    // Track screen view khi widget ƒë∆∞·ª£c t·∫°o
    _trackScreenView();
  }

  Future<void> _trackScreenView() async {
    await FirebaseUtils.trackNavigation('example_screen');
  }

  Future<void> _handleButtonPress() async {
    try {
      // Track button tap
      await FirebaseUtils.trackButtonTap('example_button');

      // Th·ª±c hi·ªán operation v·ªõi performance tracking
      final result = await FirebaseUtils.trackAsyncOperation(
        'example_operation',
        () async {
          // Simulate some work
          await Future.delayed(const Duration(seconds: 1));
          return 'Operation completed';
        },
      );

      // Show result
      if (mounted) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text(result)));
      }
    } catch (error, stackTrace) {
      // Log error to Crashlytics
      await FirebaseUtils.logNonFatalError(
        error,
        stackTrace,
        context: 'Error in example button handler',
        screenName: 'example_screen',
      );

      // Show error to user
      if (mounted) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(const SnackBar(content: Text('An error occurred')));
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Firebase Integration Example')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Text(
              'Firebase Services Integration Example',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 32),
            ElevatedButton(
              onPressed: _handleButtonPress,
              child: const Text('Test Firebase Integration'),
            ),
            const SizedBox(height: 16),
            ElevatedButton.icon(
              onPressed: () async {
                await FirebaseAnalyticsService.logFeatureUsage(
                  featureName: 'help_button',
                  additionalParameters: {'screen': 'example'},
                );
              },
              icon: const Icon(Icons.help),
              label: const Text('Help'),
            ),
          ],
        ),
      ),
    );
  }
}

// ============================================================================
// 6. BEST PRACTICES V√Ä GHI CH√ö QUAN TR·ªåNG
// ============================================================================

/*
üî• BEST PRACTICES:

1. ANALYTICS:
   - S·ª≠ d·ª•ng t√™n event nh·∫•t qu√°n v√† c√≥ √Ω nghƒ©a
   - Kh√¥ng g·ª≠i th√¥ng tin c√° nh√¢n nh·∫°y c·∫£m
   - Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng custom parameters (t·ªëi ƒëa 25)
   - S·ª≠ d·ª•ng predefined events khi c√≥ th·ªÉ

2. CRASHLYTICS:
   - Lu√¥n set user ID v√† custom keys cho context
   - Log non-fatal errors ƒë·ªÉ debug
   - Kh√¥ng log qu√° nhi·ªÅu (c√≥ th·ªÉ ·∫£nh h∆∞·ªüng performance)
   - S·ª≠ d·ª•ng meaningful error messages

3. PERFORMANCE:
   - Ch·ªâ track c√°c operations quan tr·ªçng
   - S·ª≠ d·ª•ng attributes ƒë·ªÉ ph√¢n lo·∫°i traces
   - ƒê·∫∑t t√™n traces r√µ r√†ng v√† nh·∫•t qu√°n
   - Tr√°nh t·∫°o qu√° nhi·ªÅu custom traces

4. CHUNG:
   - Lu√¥n wrap Firebase calls trong try-catch
   - Ki·ªÉm tra kDebugMode ƒë·ªÉ tr√°nh spam logs
   - S·ª≠ d·ª•ng FirebaseUtils cho convenience
   - Test tr√™n c·∫£ debug v√† release builds

‚ö†Ô∏è L∆ØU √ù:
- Firebase services ch·ªâ ho·∫°t ƒë·ªông tr√™n thi·∫øt b·ªã th·∫≠t ho·∫∑c emulator c√≥ Google Play Services
- Debug builds c√≥ th·ªÉ c√≥ behavior kh√°c v·ªõi release builds
- Crashlytics c√≥ th·ªÉ m·∫•t v√†i ph√∫t ƒë·ªÉ hi·ªÉn th·ªã data tr√™n console
- Performance data th∆∞·ªùng delay 12-24h tr∆∞·ªõc khi xu·∫•t hi·ªán

üöÄ SETUP B·ªî SUNG C·∫¶N THI·∫æT:
1. Th√™m google-services.json v√†o android/app/
2. C·∫•u h√¨nh build.gradle files
3. Th√™m permissions c·∫ßn thi·∫øt trong AndroidManifest.xml
4. C·∫•u h√¨nh iOS n·∫øu c·∫ßn (GoogleService-Info.plist)
*/
